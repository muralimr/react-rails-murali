{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar server_1 = __importDefault(require(\"react-dom/server\"));\n\nvar ComponentRegistry_1 = __importDefault(require(\"./ComponentRegistry\"));\n\nvar createReactOutput_1 = __importDefault(require(\"./createReactOutput\"));\n\nvar isServerRenderResult_1 = __importDefault(require(\"./isServerRenderResult\"));\n\nvar buildConsoleReplay_1 = __importDefault(require(\"./buildConsoleReplay\"));\n\nvar handleError_1 = __importDefault(require(\"./handleError\"));\n\nfunction serverRenderReactComponent(options) {\n  var name = options.name,\n      domNodeId = options.domNodeId,\n      trace = options.trace,\n      props = options.props,\n      railsContext = options.railsContext;\n  var htmlResult = '';\n  var hasErrors = false;\n\n  try {\n    var componentObj = ComponentRegistry_1[\"default\"].get(name);\n\n    if (componentObj.isRenderer) {\n      throw new Error(\"Detected a renderer while server rendering component '\" + name + \"'. See https://github.com/shakacode/react_on_rails#renderer-functions\");\n    }\n\n    var reactElementOrRouterResult = createReactOutput_1[\"default\"]({\n      componentObj: componentObj,\n      domNodeId: domNodeId,\n      trace: trace,\n      props: props,\n      railsContext: railsContext\n    });\n\n    if (isServerRenderResult_1[\"default\"](reactElementOrRouterResult)) {\n      // We let the client side handle any redirect\n      // Set hasErrors in case we want to throw a Rails exception\n      hasErrors = !!reactElementOrRouterResult.routeError;\n\n      if (hasErrors) {\n        console.error(\"React Router ERROR: \" + JSON.stringify(reactElementOrRouterResult.routeError));\n      }\n\n      if (reactElementOrRouterResult.redirectLocation) {\n        if (trace) {\n          var redirectLocation = reactElementOrRouterResult.redirectLocation;\n          var redirectPath = redirectLocation.pathname + redirectLocation.search;\n          console.log(\"ROUTER REDIRECT: \" + name + \" to dom node with id: \" + domNodeId + \", redirect to \" + redirectPath);\n        } // For redirects on server rendering, we can't stop Rails from returning the same result.\n        // Possibly, someday, we could have the rails server redirect.\n\n      } else {\n        htmlResult = reactElementOrRouterResult.renderedHtml;\n      }\n    } else {\n      htmlResult = server_1[\"default\"].renderToString(reactElementOrRouterResult);\n    }\n  } catch (e) {\n    hasErrors = true;\n    htmlResult = handleError_1[\"default\"]({\n      e: e,\n      name: name,\n      serverSide: true\n    });\n  }\n\n  var consoleReplayScript = buildConsoleReplay_1[\"default\"]();\n  return JSON.stringify({\n    html: htmlResult,\n    consoleReplayScript: consoleReplayScript,\n    hasErrors: hasErrors\n  });\n}\n\nexports[\"default\"] = serverRenderReactComponent;","map":null,"metadata":{},"sourceType":"module"}