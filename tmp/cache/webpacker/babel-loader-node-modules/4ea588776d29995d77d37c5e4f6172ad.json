{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar registeredStoreGenerators = new Map();\nvar hydratedStores = new Map();\nexports[\"default\"] = {\n  /**\n   * Register a store generator, a function that takes props and returns a store.\n   * @param storeGenerators { name1: storeGenerator1, name2: storeGenerator2 }\n   */\n  register: function register(storeGenerators) {\n    Object.keys(storeGenerators).forEach(function (name) {\n      if (registeredStoreGenerators.has(name)) {\n        console.warn('Called registerStore for store that is already registered', name);\n      }\n\n      var store = storeGenerators[name];\n\n      if (!store) {\n        throw new Error('Called ReactOnRails.registerStores with a null or undefined as a value ' + (\"for the store generator with key \" + name + \".\"));\n      }\n\n      registeredStoreGenerators.set(name, store);\n    });\n  },\n\n  /**\n   * Used by components to get the hydrated store which contains props.\n   * @param name\n   * @param throwIfMissing Defaults to true. Set to false to have this call return undefined if\n   *        there is no store with the given name.\n   * @returns Redux Store, possibly hydrated\n   */\n  getStore: function getStore(name, throwIfMissing) {\n    if (throwIfMissing === void 0) {\n      throwIfMissing = true;\n    }\n\n    if (hydratedStores.has(name)) {\n      return hydratedStores.get(name);\n    }\n\n    var storeKeys = Array.from(hydratedStores.keys()).join(', ');\n\n    if (storeKeys.length === 0) {\n      var msg = \"There are no stores hydrated and you are requesting the store \" + name + \".\\nThis can happen if you are server rendering and either:\\n1. You do not call redux_store near the top of your controller action's view (not the layout)\\n   and before any call to react_component.\\n2. You do not render redux_store_hydration_data anywhere on your page.\";\n      throw new Error(msg);\n    }\n\n    if (throwIfMissing) {\n      console.log('storeKeys', storeKeys);\n      throw new Error(\"Could not find hydrated store with name '\" + name + \"'. \" + (\"Hydrated store names include [\" + storeKeys + \"].\"));\n    }\n\n    return undefined;\n  },\n\n  /**\n   * Internally used function to get the store creator that was passed to `register`.\n   * @param name\n   * @returns storeCreator with given name\n   */\n  getStoreGenerator: function getStoreGenerator(name) {\n    if (registeredStoreGenerators.has(name)) {\n      return registeredStoreGenerators.get(name);\n    }\n\n    var storeKeys = Array.from(registeredStoreGenerators.keys()).join(', ');\n    throw new Error(\"Could not find store registered with name '\" + name + \"'. Registered store \" + (\"names include [ \" + storeKeys + \" ]. Maybe you forgot to register the store?\"));\n  },\n\n  /**\n   * Internally used function to set the hydrated store after a Rails page is loaded.\n   * @param name\n   * @param store (not the storeGenerator, but the hydrated store)\n   */\n  setStore: function setStore(name, store) {\n    hydratedStores.set(name, store);\n  },\n\n  /**\n   * Internally used function to completely clear hydratedStores Map.\n   */\n  clearHydratedStores: function clearHydratedStores() {\n    hydratedStores.clear();\n  },\n\n  /**\n   * Get a Map containing all registered store generators. Useful for debugging.\n   * @returns Map where key is the component name and values are the store generators.\n   */\n  storeGenerators: function storeGenerators() {\n    return registeredStoreGenerators;\n  },\n\n  /**\n   * Get a Map containing all hydrated stores. Useful for debugging.\n   * @returns Map where key is the component name and values are the hydrated stores.\n   */\n  stores: function stores() {\n    return hydratedStores;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}